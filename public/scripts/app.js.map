{"version":3,"file":"/scripts/app.js","mappings":"oHAKAA,GAAE,WAEAA,EAAAA,uBAAAA,OAA+B,WAC7BA,EAAAA,wBAAAA,YAAAA,UACAA,EAAAA,MAAAA,SAAAA,UAEA,IAAIC,EAAOD,EAAAA,MAAAA,KAJ6B,QAMxCA,EAAAA,qBAAAA,KAAAA,WAAAA,GACAA,EAAE,2BAA6BC,EAA/BD,KAAAA,KAAAA,WAAAA,MAGFA,EAAAA,iCAAAA,OAAyC,WACvCA,EAAAA,wBAAAA,YAAAA,UACAA,EAAAA,MAAAA,SAAAA,UAEA,IAAIC,EAAOD,EAAAA,MAAAA,KAAX,QAEAA,EAAAA,wBAAAA,YAAAA,UACAA,EAAAA,8BAAAA,KAAAA,eAAAA,OAAAA,EAAAA,OAAAA,SAPkD,UASlDA,EAAAA,oBAAAA,KAAAA,WAAAA,GACAA,EAAE,0BAA4BC,EAA9BD,KAAAA,KAAAA,WAAAA,MAGFA,EAAAA,YAAAA,MAAmB,YAMrB,SAAiB,GAGf,IAAIE,EAAWC,EAAAA,KAHO,WAMlBC,EAAU,CACVC,KAAcF,EAAAA,KAAAA,SADJ,GAEVG,UAAcC,OAAAA,KAAAA,UAAsBC,SAEpCC,EAAM,IAAIF,OAAAA,KAAJ,IAAqBJ,EAArB,GAVY,GAatBM,EAAAA,QAAAA,GACAP,EAAAA,MAAc,YAWhB,SAAoB,EAApB,GAGE,IAAIQ,EAAMC,EAAAA,KAAV,OACIC,EAAMD,EAAAA,KAAV,OACIE,EAAS,CACTH,IAAKI,WADI,GAETF,IAAKE,WAAW,IAIhBC,EAAS,IAAIR,OAAAA,KAAJ,OAAuB,CAChCS,SADgC,EAEhCP,IAAKA,IAOT,GAHAA,EAAAA,QAAAA,KAjBkC,GAoB9BE,EAAJ,OAAoB,CAGhB,IAAIM,EAAa,IAAIV,OAAAA,KAAJ,WAA2B,CACxCW,QAASP,EAAAA,SAIbJ,OAAAA,KAAAA,MAAAA,YAAAA,EAAAA,SAA+C,WAC3CU,EAAAA,KAAAA,EAAAA,OAvCJE,CAAYnB,EAAF,MAAVmB,MA4CN,SAAmB,GAGjB,IAAIC,EAAS,IAAIb,OAAAA,KAAjB,aACAE,EAAAA,QAAAA,SAAoB,YAChBW,EAAAA,OAAc,CACVV,IAAKK,EAAAA,SADK,MAEVH,IAAKG,EAAAA,SAAAA,WAKb,GAAIN,EAAAA,QAAAA,OACAA,EAAAA,UAAeW,EADU,aAKzBX,EAAAA,UAAAA,GAzDJY,CAnBsB,GALRC,CAAStB,EAAnB,c,iDC/BNuB,EAAOC,QAAUC,OAAe,S","sources":["webpack://sage/./resources/scripts/app.js","webpack://sage/external window \"jQuery\""],"sourcesContent":["/**\n * External Dependencies\n */\nimport 'jquery';\n\n$(() => {\n\n  $('.home .service-type').click(function() {\n    $('.service-type.active').removeClass('active');\n    $(this).addClass('active');\n\n    var type = $(this).data('type');\n    //console.log(type)\n    $(('#input_1_11 input')).attr('checked', false);\n    $('#input_1_11 input[value=' + type + ']').attr('checked', true);\n  })\n\n  $('.annual-service .service-type').click(function() {\n    $('.service-type.active').removeClass('active');\n    $(this).addClass('active');\n\n    var type = $(this).data('type');\n\n    $('.service-item.active').removeClass('active');\n    $('.service-content-container').find(`[data-type='${type}']`).addClass('active');\n    //console.log(type)\n    $(('#input_2_2 input')).attr('checked', false);\n    $('#input_2_2 input[value=' + type + ']').attr('checked', true);\n  })\n\n  $('.acf-map').each(function(){\n      var map = initMap( $(this) );\n  });\n\n});\n\nfunction initMap( $el ) {\n\n  // Find marker elements within map.\n  var $markers = $el.find('.marker');\n\n  // Create gerenic map.\n  var mapArgs = {\n      zoom        : $el.data('zoom') || 16,\n      mapTypeId   : google.maps.MapTypeId.ROADMAP\n  };\n  var map = new google.maps.Map( $el[0], mapArgs );\n\n  // Add markers.\n  map.markers = [];\n  $markers.each(function(){\n      initMarker( $(this), map );\n  });\n\n  // Center map based on markers.\n  centerMap( map );\n\n  // Return map instance.\n  return map;\n}\n\nfunction initMarker( $marker, map ) {\n\n  // Get position from marker.\n  var lat = $marker.data('lat');\n  var lng = $marker.data('lng');\n  var latLng = {\n      lat: parseFloat( lat ),\n      lng: parseFloat( lng )\n  };\n\n  // Create marker instance.\n  var marker = new google.maps.Marker({\n      position : latLng,\n      map: map\n  });\n\n  // Append to reference for later use.\n  map.markers.push( marker );\n\n  // If marker contains HTML, add it to an infoWindow.\n  if( $marker.html() ){\n\n      // Create info window.\n      var infowindow = new google.maps.InfoWindow({\n          content: $marker.html()\n      });\n\n      // Show info window when marker is clicked.\n      google.maps.event.addListener(marker, 'click', function() {\n          infowindow.open( map, marker );\n      });\n  }\n}\n\nfunction centerMap( map ) {\n\n  // Create map boundaries from all map markers.\n  var bounds = new google.maps.LatLngBounds();\n  map.markers.forEach(function( marker ){\n      bounds.extend({\n          lat: marker.position.lat(),\n          lng: marker.position.lng()\n      });\n  });\n\n  // Case: Single marker.\n  if( map.markers.length == 1 ){\n      map.setCenter( bounds.getCenter() );\n\n  // Case: Multiple markers.\n  } else{\n      map.fitBounds( bounds );\n  }\n}","module.exports = window[\"jQuery\"];"],"names":["$","type","$markers","$el","mapArgs","zoom","mapTypeId","google","ROADMAP","map","lat","$marker","lng","latLng","parseFloat","marker","position","infowindow","content","initMarker","bounds","centerMap","initMap","module","exports","window"],"sourceRoot":""}